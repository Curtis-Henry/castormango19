{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TokenRefreshLink = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _apolloLink = require(\"apollo-link\");\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _utils = require(\"./utils\");\n/**\n * Token Refresh Link renew authentication token when it's expired.\n * @param {TokenRefreshLinkOptions} options - The token refresh link options.\n * @param {Function} options.getRefreshTokenParameters - The function which are using for get refresh token parameters.\n * @param {Function} options.onAuthSuccess - The callback which called when attempt to refresh authentication is success.\n * @param {Function} [options.onAuthError] - The callback which called when attempt to refresh authentication is failed.\n * @param {Function} [options.onIdTokenExpired] - The callback which called when id token is expired.\n */\n\n\nvar TokenRefreshLink =\n/*#__PURE__*/\nfunction (_ApolloLink) {\n  (0, _inherits2.default)(TokenRefreshLink, _ApolloLink);\n\n  function TokenRefreshLink(_ref) {\n    var _this;\n\n    var onIdTokenExpired = _ref.onIdTokenExpired,\n        onAuthError = _ref.onAuthError;\n    (0, _classCallCheck2.default)(this, TokenRefreshLink);\n    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TokenRefreshLink).call(this));\n    _this.onAuthError = onAuthError;\n    _this.onIdTokenExpired = onIdTokenExpired;\n    return _this;\n  }\n\n  (0, _createClass2.default)(TokenRefreshLink, [{\n    key: \"request\",\n    value: function request(operation, forward) {\n      var _this2 = this;\n\n      return new _apolloLink.Observable(function (observer) {\n        var subscription = null;\n        var handling = false;\n\n        var handleTokenRefresh = function handleTokenRefresh() {\n          _this2.handleTokenExpired().then(function () {\n            var observable = forward(operation);\n\n            if (subscription) {\n              subscription.unsubscribe();\n            }\n\n            handling = false;\n            subscription = observable.subscribe(subscriber);\n          }).catch(function (err) {\n            _this2.handleAuthFailed(err);\n\n            handling = false;\n            observer.complete();\n          });\n        };\n\n        var subscriber = {\n          next: function next(data) {\n            var dataErrors = data.errors || [];\n\n            if ((0, _utils.hasIdTokenExpiredError)(dataErrors)) {\n              handling = true;\n              handleTokenRefresh();\n            } else if ((0, _utils.hasRefreshTokenExpiredError)(dataErrors) || (0, _utils.hasTokenInvalidError)(dataErrors)) {\n              _this2.handleAuthFailed();\n            } else {\n              observer.next(data);\n            }\n          },\n          error: function error(_error) {\n            var batchedErrors = R.pathOr([_error], ['response', 'parsed', 'errors'], _error);\n\n            if ((0, _utils.hasIdTokenExpiredError)(batchedErrors)) {\n              handling = true;\n              handleTokenRefresh();\n            } else if ((0, _utils.hasRefreshTokenExpiredError)(batchedErrors) || (0, _utils.hasTokenInvalidError)(batchedErrors)) {\n              _this2.handleAuthFailed();\n            } else {\n              observer.error(_error);\n            }\n          },\n          complete: function complete() {\n            if (!handling) {\n              observer.complete();\n            }\n          }\n        };\n        subscription = forward(operation).subscribe(subscriber);\n        return subscription;\n      });\n    }\n  }, {\n    key: \"handleTokenExpired\",\n    value: function handleTokenExpired() {\n      if (typeof this.onIdTokenExpired === 'function') {\n        return this.onIdTokenExpired();\n      }\n\n      return Promise.reject();\n    }\n  }, {\n    key: \"handleAuthFailed\",\n    value: function handleAuthFailed(err) {\n      if (typeof this.onAuthError === 'function') {\n        this.onAuthError(err);\n      }\n    }\n  }]);\n  return TokenRefreshLink;\n}(_apolloLink.ApolloLink);\n\nexports.TokenRefreshLink = TokenRefreshLink;","map":null,"metadata":{},"sourceType":"script"}