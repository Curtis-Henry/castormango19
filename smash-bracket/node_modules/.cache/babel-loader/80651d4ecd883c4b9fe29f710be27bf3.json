{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"gql\", {\n  enumerable: true,\n  get: function get() {\n    return _graphqlTag.default;\n  }\n});\nObject.defineProperty(exports, \"InMemoryCache\", {\n  enumerable: true,\n  get: function get() {\n    return _apolloCacheInmemory.InMemoryCache;\n  }\n});\nexports.EightBaseApolloClient = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _graphqlTag = _interopRequireDefault(require(\"graphql-tag\"));\n\nvar _apolloClient = require(\"apollo-client\");\n\nvar _apolloCacheInmemory = require(\"apollo-cache-inmemory\");\n\nvar _apolloLink = require(\"apollo-link\");\n\nvar _apolloLinkBatchHttp = require(\"apollo-link-batch-http\");\n\nvar _apolloLinks = require(\"@8base/apollo-links\");\n\nvar _apolloLinkError = require(\"apollo-link-error\");\n/**\r\n * Extended Apollo Client by 8base several links.\r\n *\r\n * @param {Object} config - The Apollo Client config.\r\n * @param {string} config.uri Endpoint of the GraphQl server.\r\n * @param {Function} config.getAuthState - The function which are using to get auth state.\r\n * @param {Function} config.getRefreshTokenParameters - The function which are using for get refresh token parameters.\r\n * @param {Function} config.onAuthSuccess - The callback which called when attempt to refresh authentication is success.\r\n * @param {Function} [config.onAuthError] - The callback which called when attempt to refresh authentication is failed.\r\n * @param {Function} [config.onIdTokenExpired] - The callback which called when id token is expired.\r\n * @param {Function} [config.onRequestSuccess] - The callback which called when request is success.\r\n * @param {Function} [config.onRequestError] - The callback which called when request is fail.\r\n * @param {Function} [config.extendLinks] - Function to extend standart array of the links.\r\n *\r\n * @return instance of the Apollo Client\r\n */\n\n\nvar EightBaseApolloClient =\n/*#__PURE__*/\nfunction (_ApolloClient) {\n  (0, _inherits2.default)(EightBaseApolloClient, _ApolloClient);\n\n  function EightBaseApolloClient(config) {\n    (0, _classCallCheck2.default)(this, EightBaseApolloClient);\n    var uri = config.uri,\n        getAuthState = config.getAuthState,\n        getRefreshTokenParameters = config.getRefreshTokenParameters,\n        onAuthSuccess = config.onAuthSuccess,\n        onAuthError = config.onAuthError,\n        onIdTokenExpired = config.onIdTokenExpired,\n        onRequestSuccess = config.onRequestSuccess,\n        onRequestError = config.onRequestError,\n        extendLinks = config.extendLinks,\n        rest = (0, _objectWithoutProperties2.default)(config, [\"uri\", \"getAuthState\", \"getRefreshTokenParameters\", \"onAuthSuccess\", \"onAuthError\", \"onIdTokenExpired\", \"onRequestSuccess\", \"onRequestError\", \"extendLinks\"]);\n    var cache = config.cache;\n\n    if (!cache) {\n      cache = new _apolloCacheInmemory.InMemoryCache();\n    }\n\n    var authLink = new _apolloLinks.AuthLink({\n      getAuthState: getAuthState,\n      getRefreshTokenParameters: getRefreshTokenParameters,\n      onAuthSuccess: onAuthSuccess,\n      onAuthError: onAuthError,\n      onIdTokenExpired: onIdTokenExpired\n    });\n    var batchHttpLink = new _apolloLinkBatchHttp.BatchHttpLink({\n      uri: uri\n    });\n    var links = [authLink, batchHttpLink];\n\n    if (typeof onRequestSuccess === 'function') {\n      links = [new _apolloLinks.SuccessLink({\n        successHandler: onRequestSuccess\n      })].concat((0, _toConsumableArray2.default)(links));\n    }\n\n    if (typeof onRequestError === 'function') {\n      links = [(0, _apolloLinkError.onError)(onRequestError)].concat((0, _toConsumableArray2.default)(links));\n    }\n\n    if (typeof extendLinks === 'function') {\n      links = extendLinks(links);\n    }\n\n    var link = _apolloLink.ApolloLink.from(links);\n\n    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(EightBaseApolloClient).call(this, (0, _objectSpread2.default)({\n      cache: cache,\n      link: link\n    }, rest)));\n  }\n\n  return EightBaseApolloClient;\n}(_apolloClient.ApolloClient);\n\nexports.EightBaseApolloClient = EightBaseApolloClient;","map":null,"metadata":{},"sourceType":"script"}