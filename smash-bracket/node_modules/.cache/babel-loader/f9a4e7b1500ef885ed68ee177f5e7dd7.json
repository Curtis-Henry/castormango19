{"ast":null,"code":"import { ApolloLink, fromError, Observable } from 'apollo-link';\nimport { checkFetcher, selectURI, selectHttpOptionsAndBody, fallbackHttpConfig, serializeFetchParameter, createSignalIfSupported, parseAndCheckHttpResponse } from 'apollo-link-http-common';\nimport { BatchLink } from 'apollo-link-batch';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar BatchHttpLink = function (_super) {\n  __extends(BatchHttpLink, _super);\n\n  function BatchHttpLink(fetchParams) {\n    if (fetchParams === void 0) {\n      fetchParams = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    var _a = fetchParams.uri,\n        uri = _a === void 0 ? '/graphql' : _a,\n        fetcher = fetchParams.fetch,\n        includeExtensions = fetchParams.includeExtensions,\n        batchInterval = fetchParams.batchInterval,\n        batchMax = fetchParams.batchMax,\n        batchKey = fetchParams.batchKey,\n        requestOptions = __rest(fetchParams, [\"uri\", \"fetch\", \"includeExtensions\", \"batchInterval\", \"batchMax\", \"batchKey\"]);\n\n    checkFetcher(fetcher);\n\n    if (!fetcher) {\n      fetcher = fetch;\n    }\n\n    var linkConfig = {\n      http: {\n        includeExtensions: includeExtensions\n      },\n      options: requestOptions.fetchOptions,\n      credentials: requestOptions.credentials,\n      headers: requestOptions.headers\n    };\n    _this.batchInterval = batchInterval || 10;\n    _this.batchMax = batchMax || 10;\n\n    var batchHandler = function batchHandler(operations) {\n      var chosenURI = selectURI(operations[0], uri);\n      var context = operations[0].getContext();\n      var contextConfig = {\n        http: context.http,\n        options: context.fetchOptions,\n        credentials: context.credentials,\n        headers: context.headers\n      };\n      var optsAndBody = operations.map(function (operation) {\n        return selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig);\n      });\n      var loadedBody = optsAndBody.map(function (_a) {\n        var body = _a.body;\n        return body;\n      });\n      var options = optsAndBody[0].options;\n\n      if (options.method === 'GET') {\n        return fromError(new Error('apollo-link-batch-http does not support GET requests'));\n      }\n\n      try {\n        options.body = serializeFetchParameter(loadedBody, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n\n      var controller;\n\n      if (!options.signal) {\n        var _a = createSignalIfSupported(),\n            _controller = _a.controller,\n            signal = _a.signal;\n\n        controller = _controller;\n        if (controller) options.signal = signal;\n      }\n\n      return new Observable(function (observer) {\n        fetcher(chosenURI, options).then(function (response) {\n          operations.forEach(function (operation) {\n            return operation.setContext({\n              response: response\n            });\n          });\n          return response;\n        }).then(parseAndCheckHttpResponse(operations)).then(function (result) {\n          observer.next(result);\n          observer.complete();\n          return result;\n        }).catch(function (err) {\n          if (err.name === 'AbortError') return;\n\n          if (err.result && err.result.errors && err.result.data) {\n            observer.next(err.result);\n          }\n\n          observer.error(err);\n        });\n        return function () {\n          if (controller) controller.abort();\n        };\n      });\n    };\n\n    batchKey = batchKey || function (operation) {\n      var context = operation.getContext();\n      var contextConfig = {\n        http: context.http,\n        options: context.fetchOptions,\n        credentials: context.credentials,\n        headers: context.headers\n      };\n      return selectURI(operation, uri) + JSON.stringify(contextConfig);\n    };\n\n    _this.batcher = new BatchLink({\n      batchInterval: _this.batchInterval,\n      batchMax: _this.batchMax,\n      batchKey: batchKey,\n      batchHandler: batchHandler\n    });\n    return _this;\n  }\n\n  BatchHttpLink.prototype.request = function (operation) {\n    return this.batcher.request(operation);\n  };\n\n  return BatchHttpLink;\n}(ApolloLink);\n\nexport { BatchHttpLink };","map":null,"metadata":{},"sourceType":"module"}